global:
    - check all TODO's in code
    - check work for big arrays and batch sizes (and for array size == 1 maybe, just in case)
    - dynamically calculate proper block and grid size (so that their size is supported by GPU
      along with number of registers/shared mem/local mem). Do not forget to replace
      blockIdx.x by gridDim.x * blockIdx.y + blockIdx.x
    - find a way to disable compilation warnings; probably can be done after moving to templating engine
    - add own exception to library
    - check currently not working testcases (they were added in order to get 100% coverage on initially
      ported code; they do not work because of some bug in PyCuda)
    - currently most kernels for complex FFTs have non-zero local memory size (recompilation with lower
      block size does not help). Investigate how much it decreases performance.
    - add support for execution on custom device (not just on the one returned from autoinit)

optimizations (only after benchmarks!):
    - replace mad24() with vector function
    - replace cos() and sin() by faster analogues (if any) - see native_cos() in OpenCL
    - replace indexes with pointer arithmetic if someone answers in thread
